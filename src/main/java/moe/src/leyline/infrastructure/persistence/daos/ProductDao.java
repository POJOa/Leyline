/**
 * This class is generated by jOOQ
 */
package moe.src.leyline.infrastructure.persistence.daos;


import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import moe.src.leyline.domain.Product;
import moe.src.leyline.infrastructure.persistence.tables.ProductTable;
import moe.src.leyline.infrastructure.persistence.tables.records.ProductRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProductDao extends DAOImpl<ProductRecord, Product, Integer> {

    /**
     * Create a new ProductDao without any configuration
     */
    public ProductDao() {
        super(ProductTable.PRODUCT, Product.class);
    }

    /**
     * Create a new ProductDao with an attached configuration
     */
    @Autowired
    public ProductDao(Configuration configuration) {
        super(ProductTable.PRODUCT, Product.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(Product object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Product> fetchById(Integer... values) {
        return fetch(ProductTable.PRODUCT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Product fetchOneById(Integer value) {
        return fetchOne(ProductTable.PRODUCT.ID, value);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<Product> fetchByName(String... values) {
        return fetch(ProductTable.PRODUCT.NAME, values);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<Product> fetchByPrice(Double... values) {
        return fetch(ProductTable.PRODUCT.PRICE, values);
    }

}
